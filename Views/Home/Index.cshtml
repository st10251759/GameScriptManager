@model GameScriptManager.Models.GameScriptViewModel
@{
    ViewData["Title"] = "Script Manager";
}

<style>
    .story-container {
        background: var(--card-bg);
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--border);
    }

    .page-title {
        font-family: 'JetBrains Mono', monospace;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: var(--text-secondary);
        margin-bottom: 2rem;
    }

    .stats-row {
        margin-bottom: 2rem;
    }

    .stat-card {
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border: 1px solid #bae6fd;
        border-radius: 0.75rem;
        padding: 1.5rem;
        text-align: center;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }

    .stat-value {
        font-family: 'JetBrains Mono', monospace;
        font-size: 2rem;
        font-weight: 600;
        color: var(--primary);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .controls-section {
        background: #f8fafc;
        border: 1px solid var(--border);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .btn-group-modern {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .btn-modern {
        background: var(--card-bg);
        border: 1px solid var(--border);
        color: var(--text-primary);
        font-family: 'Inter', sans-serif;
        font-weight: 500;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-modern:hover {
        background: var(--primary);
        border-color: var(--primary);
        color: white;
        transform: translateY(-1px);
        box-shadow: var(--shadow);
    }

    .btn-modern.active {
        background: var(--primary);
        border-color: var(--primary);
        color: white;
        box-shadow: var(--shadow);
    }

    .btn-modern:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none !important;
    }

    .progress-section {
        background: #fefce8;
        border: 1px solid #fde047;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .progress-bar-container {
        background: #f3f4f6;
        border-radius: 1rem;
        height: 0.75rem;
        overflow: hidden;
        margin-top: 0.5rem;
    }

    .progress-bar-fill {
        background: linear-gradient(90deg, var(--primary) 0%, var(--accent) 100%);
        height: 100%;
        border-radius: 1rem;
        transition: width 0.3s ease;
    }

    .display-area {
        background: var(--card-bg);
        border: 1px solid var(--border);
        border-radius: 0.75rem;
        padding: 1.5rem;
        max-height: 600px;
        overflow-y: auto;
    }

    .story-line {
        display: flex;
        align-items: flex-start;
        padding: 1rem;
        margin-bottom: 0.75rem;
        background: #f9fafb;
        border: 1px solid #f3f4f6;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
    }

    .story-line:hover {
        background: #f0f9ff;
        border-color: #bae6fd;
        transform: translateX(4px);
    }

    .story-line.active-line {
        background: #dcfdf4;
        border-color: var(--accent);
        box-shadow: 0 0 0 3px rgb(16 185 129 / 0.1);
    }

    .line-number {
        background: var(--primary);
        color: white;
        font-family: 'JetBrains Mono', monospace;
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        margin-right: 1rem;
        min-width: 2.5rem;
        text-align: center;
        flex-shrink: 0;
    }

    .line-text {
        color: var(--text-primary);
        line-height: 1.6;
        flex: 1;
    }

    .single-line-display {
        text-align: center;
        padding: 3rem 2rem;
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border-radius: 0.75rem;
        border: 1px solid #bae6fd;
        min-height: 300px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .single-line-number {
        font-family: 'JetBrains Mono', monospace;
        font-size: 3rem;
        font-weight: 600;
        color: var(--primary);
        margin-bottom: 1rem;
    }

    .single-line-text {
        font-size: 1.125rem;
        line-height: 1.7;
        color: var(--text-primary);
        max-width: 80%;
        margin: 0 auto;
    }

    /* Custom Scrollbar */
    .display-area::-webkit-scrollbar {
        width: 8px;
    }

    .display-area::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
    }

    .display-area::-webkit-scrollbar-thumb {
        background: var(--secondary);
        border-radius: 4px;
    }

    .display-area::-webkit-scrollbar-thumb:hover {
        background: var(--primary);
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .story-container {
            margin: 1rem;
            padding: 1.5rem;
        }
        
        .btn-group-modern {
            flex-direction: column;
        }
        
        .stat-value {
            font-size: 1.5rem;
        }
        
        .single-line-number {
            font-size: 2rem;
        }
        
        .single-line-text {
            max-width: 100%;
            font-size: 1rem;
        }
    }
</style>

<div class="container">
    <div class="story-container">
        <div class="text-center mb-4">
            <h1 class="page-title">Alex's Digital Quest</h1>
            <p class="page-subtitle">Interactive Story Navigation System</p>
        </div>

        <!-- Statistics -->
        <div class="row stats-row">
            <div class="col-md-4 mb-3">
                <div class="stat-card">
                    <div class="stat-value">@Model.TotalLines</div>
                    <div class="stat-label">Total Lines</div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="stat-card">
                    <div class="stat-value" id="currentLineNum">@(Model.CurrentLineIndex + 1)</div>
                    <div class="stat-label">Current Line</div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="stat-card">
                    <div class="stat-value" id="progressPercent">@Math.Round((double)(Model.CurrentLineIndex + 1) / Model.TotalLines * 100)%</div>
                    <div class="stat-label">Complete</div>
                </div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls-section">
            <!-- View Mode Toggle -->
            <div class="btn-group-modern">
                <button class="btn-modern active" id="fullViewBtn" onclick="switchView('full')">
                    <i class="fas fa-list"></i> Full Story
                </button>
                <button class="btn-modern" id="singleViewBtn" onclick="switchView('single')">
                    <i class="fas fa-eye"></i> Line by Line
                </button>
            </div>

            <!-- Navigation Controls -->
            <div class="btn-group-modern" id="navigationControls" style="display: none;">
                <button class="btn-modern" id="firstBtn" onclick="navigateLine('first')">
                    <i class="fas fa-fast-backward"></i> First
                </button>
                <button class="btn-modern" id="prevBtn" onclick="navigateLine('previous')">
                    <i class="fas fa-step-backward"></i> Previous
                </button>
                <button class="btn-modern" id="nextBtn" onclick="navigateLine('next')">
                    <i class="fas fa-step-forward"></i> Next
                </button>
                <button class="btn-modern" id="lastBtn" onclick="navigateLine('last')">
                    <i class="fas fa-fast-forward"></i> Last
                </button>
            </div>

            <!-- Progress Bar -->
            <div class="progress-section" id="progressInfo" style="display: none;">
                <div class="text-center">
                    <strong>Line <span id="currentLine">@(Model.CurrentLineIndex + 1)</span> of <span id="totalLines">@Model.TotalLines</span></strong>
                </div>
                <div class="progress-bar-container">
                    <div class="progress-bar-fill" id="progressBar" style="width: @((double)(Model.CurrentLineIndex + 1) / Model.TotalLines * 100)%"></div>
                </div>
            </div>
        </div>

        <!-- Display Area -->
        <div class="display-area" id="storyDisplay">
            <!-- Full Story View -->
            <div id="fullStoryView">
                @Html.Raw(Model.GetFullStoryHtml())
            </div>

            <!-- Single Line View -->
            <div id="singleLineView" style="display: none;">
                @if (Model.CurrentLine != null)
                {
                    <div class="single-line-display">
                        <div class="single-line-number">
                            @Model.CurrentLine.StoryNumber
                        </div>
                        <div class="single-line-text">
                            @Model.CurrentLine.StoryText
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentViewMode = 'full';
    let storyData = {
        currentLineIndex: @Model.CurrentLineIndex,
        totalLines: @Model.TotalLines,
        currentLine: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CurrentLine)),
        hasNext: @Json.Serialize(Model.HasNext),
        hasPrevious: @Json.Serialize(Model.HasPrevious)
    };
    let fullStoryLines = [];

    function initializeFullStoryData() {
        const storyElements = document.querySelectorAll('#fullStoryView .story-line');
        fullStoryLines = Array.from(storyElements).map(element => {
            const numberElement = element.querySelector('.line-number');
            const textElement = element.querySelector('.line-text');
            return {
                storyNumber: parseInt(numberElement.textContent),
                storyText: textElement.textContent.trim()
            };
        });
    }

    function switchView(mode) {
        currentViewMode = mode;

        // Update button states
        document.getElementById('fullViewBtn').classList.toggle('active', mode === 'full');
        document.getElementById('singleViewBtn').classList.toggle('active', mode === 'single');

        // Show/hide controls
        document.getElementById('navigationControls').style.display = mode === 'single' ? 'flex' : 'none';
        document.getElementById('progressInfo').style.display = mode === 'single' ? 'block' : 'none';

        // Switch content
        if (mode === 'full') {
            document.getElementById('fullStoryView').style.display = 'block';
            document.getElementById('singleLineView').style.display = 'none';
        } else {
            document.getElementById('fullStoryView').style.display = 'none';
            document.getElementById('singleLineView').style.display = 'block';
            updateSingleLineView();
        }

        updateNavigationButtons();
    }

    function navigateLine(action) {
        clientSideNavigation(action);
    }

    function clientSideNavigation(action) {
        const oldIndex = storyData.currentLineIndex;

        switch (action.toLowerCase()) {
            case 'next':
                if (storyData.currentLineIndex < storyData.totalLines - 1) {
                    storyData.currentLineIndex++;
                }
                break;
            case 'previous':
                if (storyData.currentLineIndex > 0) {
                    storyData.currentLineIndex--;
                }
                break;
            case 'first':
                storyData.currentLineIndex = 0;
                break;
            case 'last':
                storyData.currentLineIndex = storyData.totalLines - 1;
                break;
        }

        // Update navigation state
        storyData.hasNext = storyData.currentLineIndex < storyData.totalLines - 1;
        storyData.hasPrevious = storyData.currentLineIndex > 0;

        // Update current line
        if (fullStoryLines.length > storyData.currentLineIndex) {
            storyData.currentLine = fullStoryLines[storyData.currentLineIndex];
        }

        updateSingleLineView();
        updateProgress();
        updateNavigationButtons();
        updateActiveLineInFullView();
    }

    function updateSingleLineView() {
        const currentLine = storyData.currentLine;
        if (currentLine && currentLine.storyNumber && currentLine.storyText) {
            const html = `
                <div class="single-line-display">
                    <div class="single-line-number">${currentLine.storyNumber}</div>
                    <div class="single-line-text">${currentLine.storyText}</div>
                </div>
            `;
            document.getElementById('singleLineView').innerHTML = html;
        }
    }

    function updateProgress() {
        const current = storyData.currentLineIndex + 1;
        const total = storyData.totalLines;
        const percentage = Math.round((current / total) * 100);

        document.getElementById('currentLine').textContent = current;
        document.getElementById('currentLineNum').textContent = current;
        document.getElementById('progressPercent').textContent = percentage + '%';
        document.getElementById('progressBar').style.width = percentage + '%';
    }

    function updateNavigationButtons() {
        document.getElementById('firstBtn').disabled = !storyData.hasPrevious;
        document.getElementById('prevBtn').disabled = !storyData.hasPrevious;
        document.getElementById('nextBtn').disabled = !storyData.hasNext;
        document.getElementById('lastBtn').disabled = !storyData.hasNext;
    }

    function updateActiveLineInFullView() {
        const allLines = document.querySelectorAll('#fullStoryView .story-line');
        allLines.forEach(line => line.classList.remove('active-line'));

        if (allLines[storyData.currentLineIndex]) {
            allLines[storyData.currentLineIndex].classList.add('active-line');
            if (currentViewMode === 'full') {
                allLines[storyData.currentLineIndex].scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        }
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
        initializeFullStoryData();
        switchView('full');
        updateNavigationButtons();
    });

    // Keyboard navigation
    document.addEventListener('keydown', function(event) {
        if (currentViewMode === 'single') {
            switch(event.key) {
                case 'ArrowRight':
                case ' ':
                    event.preventDefault();
                    navigateLine('next');
                    break;
                case 'ArrowLeft':
                    event.preventDefault();
                    navigateLine('previous');
                    break;
                case 'Home':
                    event.preventDefault();
                    navigateLine('first');
                    break;
                case 'End':
                    event.preventDefault();
                    navigateLine('last');
                    break;
            }
        }
    });
</script>
}